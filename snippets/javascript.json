{
  "🎯 log 字符:变量": {
    "prefix": "cls",
    "body": [
      "console.log('${0:string} >>',${0:variable});"
    ]
  },
  "🎯 log 变量": {
    "prefix": "clv",
    "body": [
      "console.log(${1:variable});"
    ]
  },
  "🎯 普通函数": {
    "prefix": "FN",
    "body": [
      "function ${1:name}(params) {",
      "",
      "},"
    ]
  },
  "🎯 对象函数的简写": {
    "prefix": "OF",
    "body": [
      "${1:name}(params) {",
      "",
      "},"
    ]
  },
  "🎯 箭头函数": {
    "prefix": "jF",
    "body": [
      "(parame) => {};"
    ]
  },
  "🎯 带名字的箭头函数": {
    "prefix": "jFN",
    "body": [
      "const ${1:name} = () => {};"
    ]
  },
  "🎯 数组 forEach": {
    "prefix": "AFE",
    "body": [
      "${1:array}.forEach(item => {})"
    ]
  },
  "🎯 for 循环": {
    "prefix": "forLoop",
    "body": [
      "for (let i = 0; i < ${1:array}; i++) {",
      "",
      "}"
    ]
  },
  "🎯 for-of 循环": {
    "prefix": "fof",
    "body": [
      "for (const item of ${1:object}) {",
      "",
      "}"
    ]
  },
  "🎯 for-in 循环": {
    "prefix": "fin",
    "body": [
      "for (const item in ${1:object}) {",
      "",
      "}"
    ]
  },
  "🎯 v2 data": {
    "prefix": "vdata",
    "body": [
      "data() {",
      "  return {",
      "    $1",
      "  }",
      "},"
    ]
  },
  "🎯 import vue": {
    "prefix": "iVue",
    "body": [
      "import { $1 } from 'vue'"
    ]
  },
  "🎯 import reactive": {
    "prefix": "iReactive",
    "body": [
      "reactive"
    ]
  },
  "🎯 import defineProps": {
    "prefix": "iProps",
    "body": [
      "defineProps"
    ]
  },
  "🎯 import defineEmits": {
    "prefix": "iEmits",
    "body": [
      "defineEmits"
    ]
  },
  "🎯 import useSlots": {
    "prefix": "iSlots",
    "body": [
      "useSlots"
    ]
  },
  "🎯 import useAttrs": {
    "prefix": "iAttrs",
    "body": [
      "useAttrs"
    ]
  },
  "🎯 import defineExpose": {
    "prefix": "iExpose",
    "body": [
      "defineExpose"
    ]
  },
  "🎯 import onBeforeMount": {
    "prefix": "iBMount",
    "body": [
      "onBeforeMount "
    ]
  },
  "🎯 import onMounted ": {
    "prefix": "iMounted",
    "body": [
      "onMounted "
    ]
  },
  "🎯 import onBeforeUpdate ": {
    "prefix": "iBUpdate",
    "body": [
      "onBeforeUpdate "
    ]
  },
  "🎯 import onUpdated ": {
    "prefix": "iUpdated",
    "body": [
      "onUpdated "
    ]
  },
  "🎯 import onBeforeUnmount ": {
    "prefix": "iBUnmount",
    "body": [
      "onBeforeUnmount "
    ]
  },
  "🎯 import onUnmounted": {
    "prefix": "iUnmounted",
    "body": [
      "onUnmounted "
    ]
  },
  "🎯 v2 props": {
    "prefix": "vProp",
    "body": [
      "props: {",
      "  ${1:propName}: {",
      "    type: ${2:type}",
      "  }",
      "},"
    ]
  },
  "🎯 v2 props default": {
    "prefix": "vPD",
    "body": [
      "props: {",
      "  ${1:name}: {",
      "    type: ${2:type},",
      "    default: ${3:default}",
      "  }",
      "},"
    ]
  },
  "🎯 v2 props default required": {
    "prefix": "vPDR",
    "body": [
      "props: {",
      "  ${1:name}: {",
      "    type: ${2:type},",
      "    default: ${3:default},",
      "    required: true",
      "  }",
      "},"
    ]
  },
  "🎯 v2 methods": {
    "prefix": "vMethods",
    "body": [
      "methods: {",
      "  ${1:name}() {",
      "",
      "  }",
      "},"
    ]
  },
  "🎯 v2 computed": {
    "prefix": "vComputed",
    "body": [
      "computed: {",
      "  ${1:name}() {",
      "    return $2",
      "  }",
      "},"
    ]
  },
  "🎯 v2 computed setter": {
    "prefix": "vCS",
    "body": [
      "computed: {",
      "  ${1:name}: {",
      "    get() {",
      "",
      "      return ",
      "    },",
      "    set(newValue) {",
      "",
      "    },",
      "  }",
      "},"
    ]
  },
  "🎯 v2 watch": {
    "prefix": "vWatch",
    "body": [
      "watch: {",
      "  ${1:name}(newValue, oldValue) {",
      "    $2",
      "  }",
      "},"
    ]
  },
  "🎯 v2 watch deep": {
    "prefix": "vWD",
    "body": [
      "watch: {",
      "  ${1:name}: {",
      "    handler(newValue, oldValue) {",
      "      $2",
      "    },",
      "    deep:true,",
      "  }",
      "},"
    ]
  },
  "🎯 v2 watch immediate": {
    "prefix": "vWI",
    "body": [
      "watch: {",
      "  ${1:name}: {",
      "    handler(newValue, oldValue) {",
      "      $2",
      "    },",
      "    immediate:true,",
      "  }",
      "},"
    ]
  },
  "🎯 v2 watch deep immediate": {
    "prefix": "vWDI",
    "body": [
      "watch: {",
      "  ${1:name}: {",
      "    handler(newValue, oldValue) {",
      "      $2",
      "    },",
      "    deep:true,",
      "    immediate:true,",
      "  }",
      "},"
    ]
  },
  "🎯 v2 filters": {
    "prefix": "vFilters",
    "body": [
      "filters: {",
      "  ${1:name}(value) {",
      "    return value;",
      "  }",
      "},"
    ]
  },
  "🎯 v2 mixins": {
    "prefix": "vMixins",
    "body": [
      "mixins: [${1:name}],"
    ]
  },
  "🎯 v2 beforeCreate": {
    "prefix": "vBCreate",
    "body": [
      "beforeCreate () {",
      "",
      "},"
    ]
  },
  "🎯 v2 created": {
    "prefix": "vCreated",
    "body": [
      "created () {",
      "",
      "},"
    ]
  },
  "🎯 v2 beforeMount": {
    "prefix": "vBMount",
    "body": [
      "beforeMount () {",
      "",
      "},"
    ]
  },
  "🎯 v2 mounted": {
    "prefix": "vMounted",
    "body": [
      "mounted () {",
      "",
      "},"
    ]
  },
  "🎯 v2 beforeUpdate": {
    "prefix": "vBUpdate",
    "body": [
      "beforeUpdate () {",
      "",
      "},"
    ]
  },
  "🎯 v2 updated": {
    "prefix": "vUpdated",
    "body": [
      "updated () {",
      "",
      "},"
    ]
  },
  "🎯 v2 beforeUnmount": {
    "prefix": "vBUnmount",
    "body": [
      "beforeUnmount () {",
      "",
      "},"
    ]
  },
  "🎯 v2 unmounted": {
    "prefix": "vUnmounted",
    "body": [
      "unmounted () {",
      "",
      "},"
    ]
  },
  "🎯 v3 ref": {
    "prefix": "vvRef",
    "body": [
      "const ${1:name} = ref(${2:variable})"
    ]
  },
  "🎯 v3 reactive": {
    "prefix": "vvReactive",
    "body": [
      "const ${1:name} = reactive({",
      "  $2",
      "})"
    ]
  },
  "🎯 v3 defineProps": {
    "prefix": "vvProps",
    "body": [
      "defineProps({",
      "  $1: {",
      "    type: $2,",
      "    datault: $3,",
      "    required: true",
      "  }",
      "})"
    ]
  },
  "🎯 v3 defineEmits": {
    "prefix": "vvEmits",
    "body": [
      "const emit = defineEmits(['$1']);"
    ]
  },
  "🎯 v3 useSlots": {
    "prefix": "vvSlots",
    "body": [
      "const slots = useSlots()"
    ]
  },
  "🎯 v3 useAttrs": {
    "prefix": "vvAttrs",
    "body": [
      "const attrs = useAttrs()"
    ]
  },
  "🎯 v3 defineExpose": {
    "prefix": "vvExpose",
    "body": [
      "defineExpose({",
      "  $1",
      "});"
    ]
  },
  "🎯 v3 computed": {
    "prefix": "vvComputed",
    "body": [
      "const ${1:name} = computed(() => {",
      "  return ",
      "})"
    ]
  },
  "🎯 v3 watch": {
    "prefix": "vvWatch",
    "body": [
      "watch(() => ${1:name}, (newValue, oldValue) => {",
      "  $2",
      "})"
    ]
  },
  "🎯 v3 watch immediate": {
    "prefix": "vvWI",
    "body": [
      "watch(() => ${1:name}, (newValue, oldValue) => {",
      "  $2",
      "},{ immediate: true })"
    ]
  },
  "🎯 v3 watch arr": {
    "prefix": "vvWA",
    "body": [
      "watch([${1:nameA}, ${2:nameB}], ([new${1:nameA}, new${2:nameB}], [old${1:nameA}, old${2:nameB}]) => {",
      "  $3",
      "})"
    ]
  },
  "🎯 v3 watch arr immediate": {
    "prefix": "vvWAI",
    "body": [
      "watch([${1:nameA}, ${2:nameB}], ([new${1:nameA}, new${2:nameB}], [old${1:nameA}, old${2:nameB}]) => {",
      "  $3",
      "},{ immediate: true })"
    ]
  },
  "🎯 v3 watchEffect": {
    "prefix": "vvWE",
    "body": [
      "watchEffect(() => {",
      "  ",
      "})"
    ]
  },
  "🎯 v3 onBeforeMount": {
    "prefix": "vvBMounted",
    "body": [
      "onBeforeMount((${1:params}) => {",
      "",
      "})"
    ]
  },
  "🎯 v3 onMounted": {
    "prefix": "vvMounted",
    "body": [
      "onMounted((${1:params}) => {",
      "",
      "})"
    ]
  },
  "🎯 v3 onBeforeUpdate": {
    "prefix": "vvBUpdate",
    "body": [
      "onBeforeUpdate((${1:params}) => {",
      "",
      "})"
    ]
  },
  "🎯 v3 onUpdated": {
    "prefix": "vvUpdated",
    "body": [
      "onUpdated((${1:params}) => {",
      "",
      "})"
    ]
  },
  "🎯 v3 onBeforeUnmount": {
    "prefix": "vvBUnmount",
    "body": [
      "onBeforeUnmount((${1:params}) => {",
      "",
      "})"
    ]
  },
  "🎯 v3 onUnmounted": {
    "prefix": "vvUnmounted",
    "body": [
      "onUnmounted((${1:params}) => {",
      "",
      "})"
    ]
  },
  "🎯 vuex store": {
    "prefix": "vStore",
    "body": [
      "import Vue from \"vue\";",
      "import Vuex from \"vuex\";",
      "Vue.use(Vuex);",
      "export default new Vuex.Store({",
      "  state: {},",
      "  mutations: {},",
      "  actions: {},",
      "});"
    ]
  },
  "🎯 vuex getters": {
    "prefix": "vGetters",
    "body": [
      "getters: {",
      "  ${1:name}(state) {",
      "    return state.${1:name};",
      "  }",
      "}"
    ]
  },
  "🎯 vuex mutations": {
    "prefix": "vMutations",
    "body": [
      "mutations: {",
      "  ${1:name}(state, ${2:parame}) {",
      "    $3",
      "  }",
      "}"
    ]
  },
  "🎯 vuex actions": {
    "prefix": "vActions",
    "body": [
      "actions: {",
      "  ${1:name}({commit}, ${2:parame}) {",
      "    commit(${1:name}', ${2:parame});",
      "  }",
      "}"
    ]
  },
  "🎯 vuex module": {
    "prefix": "vModule",
    "body": [
      "export default {",
      "  namespaced: true,",
      "  state: {},",
      "  mutations: {},",
      "  actions: {},",
      "};"
    ]
  },
  "🎯 vueRouter router": {
    "prefix": "vRouter",
    "body": [
      "import Vue from \"vue\";",
      "import VueRouter from \"vue-router\";",
      "",
      "Vue.use(VueRouter);",
      "",
      "const routes = [",
      "  {",
      "    path: \"\",",
      "    name: \"\",",
      "    alias: \"\",",
      "    component: ",
      "  },",
      "];",
      "",
      "const router = new VueRouter({",
      "  mode: \"history\",",
      "  base: process.env.BASE_URL,",
      "  routes,",
      "});",
      "",
      "export default router;"
    ]
  }
}